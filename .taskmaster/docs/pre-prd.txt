# Claude Code for Creators – PRD (Concise)

## Overview
This app is built on top of **Claude Code** and the **Claude Code SDK**, integrating core features from the platform—such as context management, sub-agents, and MCP tool support—but wrapped in a UI/UX uniquely designed for creative professionals.

## Objective
Enable solo creators and small teams to write, iterate, and collaborate on documents with a **persistent, context-rich AI**, avoiding stateless limitations, hallucinations, and copy–paste friction.

## Key Features

- **Persistent context**  
  Sidebar for snippets, drafts, and versions saved in-app. Easily recallable without external tools or re-uploads.

- **Sub-agents**  
  Spawn isolated mini‑AI threads (e.g., “outline helper,” “ad copy draft”) that don’t clutter the main document and can be merged when ready.

- **File integration**  
  Connect Google Drive, Dropbox, Notion, or manually upload files to import/export whole documents or folders into your workspace.

- **Context control commands**  
  Use slash commands like `/compact`, `/clear`, `/include`, `/snippet` to manage session context.

- **Custom tools & widgets**  
  Using the Claude Code SDK, provide a wizard to define slash‑driven tools (e.g. `/summarize-last`, `/translate-it`). Include drag‑dock widgets for outlines, research, and world‑building.

- **Creatively tailored UX**  
  While powered by Claude Code, the interface is bespoke for documents—not code—offering a polished editor, drag‑n‑drop widgets, presence UI, and creative-friendly design.

- **Collaboration support**  
  Enable real-time or async co-editing with shared rooms, live cursors, and optional voice chat—all backed by Claude Code’s backend.

## User Flows

### Solo Writer  
1. Start a new document—powered by Claude Code in background.  
2. Write text; invoke slash commands (`/summarize-last`, `/include draft`).  
3. Save snippets; launch sub‑agents for targeted tasks.  
4. Compact context; export final draft.

### Small Team  
1. Launch a shared session; collaborators join.  
2. Co-write using widgets, sub‑agents, and slash tools.  
3. Translate sections (`/translate to Spanish`).  
4. Export with context snapshot; sync to cloud storage.
5. Users can comment on each other's work.
6. Users can create shared todo lists for keeping track group goals.

## Competitive Insight

- Existing tools (Notion AI, Type.ai, NotebookLM) provide inline AI but lack parallel agent threads, persistent context, or creative-first UX enhancements.  
- Claude Code’s SDK and MCP give us deep power under the hood—context-aware agents, external tool support—all wrapped in a UI designed for writers, not developers.

## Technical Overview

**Framework & Architecture**

- **Ruby on Rails 8** – core framework for backend logic, real-time features (via Turbo 8), and server-rendered HTML.
- **Tailwind CSS** – utility-first styling for rapid UI iteration with creative-friendly design.
- **Vite (via `ruby_vite`)** – JavaScript bundler for building dynamic UI components and Stimulus controllers; integrates tightly with Rails and supports HMR.
- **SQLite** – lightweight database for local development; can be swapped for PostgreSQL in production.

**Key Libraries & Tools**

- `solid_cable` – Turbo Streams over WebSocket channels, including presence and typing indicators.
- `solid_queue` – native background job system using database-backed queuing.
- `solid_cache` – memory-like caching built into ActiveRecord.
- `turbo-rails` & `stimulus-rails` – for Hotwire support (real-time updates, partial page refresh).
- `active_storage` – file attachments and integrations with GDrive, Dropbox.
- `view_component` – for reusable frontend blocks using Tailwind.
- `yjs` – CRDT layer for collaborative real-time editing (used via JS).
- `claude_code_sdk` – integration layer for LLM context control, slash command routing, and sub-agent execution.

**Deployment Strategy**

- **Kamal 2** – simple, containerized Rails deploy with Docker and TLS support.
- **No Redis required** – thanks to Solid adapters (jobs, cache, presence) running off PostgreSQL.
- **Claude SDK Keys** – managed via encrypted Rails credentials or external secrets provider.

**Development Stack Summary**

```text
Ruby:          3.3+
Rails:         8.0+
CSS:           Tailwind CSS (via tailwindcss-rails)
JS Bundling:   Vite (via ruby_vite)
Database:      SQLite (development), PostgreSQL (production)
WebSockets:    SolidCable (Turbo 8)
Jobs:          SolidQueue
Cache:         SolidCache
File Storage:  ActiveStorage (local, S3, or third-party)
AI:            Claude Code SDK + MCP integrations
Collab:        Yjs + Turbo Presence
