# Task ID: 2
# Title: Implement Claude Code SDK Integration
# Status: done
# Dependencies: 1
# Priority: high
# Description: Integrate the Claude Code SDK to enable core AI functionality including context management, sub-agents, and MCP tool support.
# Details:
1. Add Claude Code SDK gem to Gemfile: `gem 'claude_code_sdk'`
2. Create an initializer file at `config/initializers/claude_code_sdk.rb`
3. Configure SDK with API keys using Rails credentials:
   ```ruby
   # config/initializers/claude_code_sdk.rb
   ClaudeCodeSDK.configure do |config|
     config.api_key = Rails.application.credentials.claude_code[:api_key]
     config.base_url = Rails.application.credentials.claude_code[:base_url]
     config.max_context_size = 100_000 # Adjust based on Claude model limits
   end
   ```
4. Create a service object for Claude Code interactions:
   ```ruby
   # app/services/claude_service.rb
   class ClaudeService
     def initialize(session_id = nil)
       @session_id = session_id || SecureRandom.uuid
       @client = ClaudeCodeSDK::Client.new(session_id: @session_id)
     end

     def send_message(content, context = {})
       @client.send_message(content: content, context: context)
     end

     def create_sub_agent(name, initial_context = {})
       @client.create_sub_agent(name: name, context: initial_context)
     end

     # Add methods for other SDK features
   end
   ```
5. Create a background job for async Claude interactions
6. Set up secure credential storage for API keys

# Test Strategy:
1. Write unit tests for ClaudeService methods
2. Create a mock for Claude Code SDK responses for testing
3. Test API key configuration is properly loaded from credentials
4. Verify sub-agent creation functionality
5. Test error handling for API failures
