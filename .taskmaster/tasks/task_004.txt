# Task ID: 4
# Title: Implement Persistent Context Management
# Status: pending
# Dependencies: 2, 3
# Priority: high
# Description: Create a sidebar for managing snippets, drafts, and versions that are saved in-app and easily recallable without external tools or re-uploads.
# Details:
1. Create models for context items:
   ```ruby
   # app/models/context_item.rb
   class ContextItem < ApplicationRecord
     belongs_to :document
     belongs_to :user
     validates :content, presence: true
     validates :item_type, inclusion: { in: %w[snippet draft version] }
   end
   ```
2. Implement sidebar component using ViewComponent:
   ```ruby
   # app/components/context_sidebar_component.rb
   class ContextSidebarComponent < ViewComponent::Base
     def initialize(document:, current_user:)
       @document = document
       @current_user = current_user
       @context_items = ContextItem.where(document: document, user: current_user)
                                  .order(created_at: :desc)
     end
   end
   ```
3. Create controllers for managing context items
4. Implement drag-and-drop functionality for context items using Stimulus
5. Add context item preview functionality
6. Implement context item insertion into the document
7. Create versioning system for documents
8. Add search functionality for context items

# Test Strategy:
1. Test creation and management of different context item types
2. Verify drag-and-drop functionality works correctly
3. Test insertion of context items into documents
4. Verify versioning system correctly tracks document changes
5. Test search functionality for context items
6. Ensure context items persist between sessions

# Subtasks:
## 1. Create ContextItem model and migration [pending]
### Dependencies: None
### Description: Create the ContextItem ActiveRecord model with associations to Document and User, and generate the database migration
### Details:
1. Generate model: rails generate model ContextItem document:references user:references content:text item_type:string title:string metadata:jsonb\n2. Add validations for content presence and item_type inclusion\n3. Add indexes for performance\n4. Set up associations in Document and User models

## 2. Create ContextItems controller with CRUD actions [pending]
### Dependencies: None
### Description: Implement a RESTful controller for managing context items with proper authorization
### Details:
1. Generate controller: rails generate controller ContextItems\n2. Implement CRUD actions (index, show, create, update, destroy)\n3. Add strong parameters for security\n4. Implement Pundit policies for authorization\n5. Add JSON responses for AJAX operations

## 3. Implement ContextSidebarComponent using ViewComponent [pending]
### Dependencies: None
### Description: Create a ViewComponent for the context sidebar that displays and manages snippets, drafts, and versions
### Details:
1. Generate component: rails generate component ContextSidebar document current_user\n2. Design the sidebar UI with tabs for snippets/drafts/versions\n3. Implement filtering and sorting functionality\n4. Add collapsible sections for better organization\n5. Style with Tailwind CSS following existing design patterns

## 4. Add drag-and-drop functionality with Stimulus [pending]
### Dependencies: None
### Description: Implement drag-and-drop for context items using Stimulus controllers and Sortable.js
### Details:
1. Install Sortable.js: yarn add sortablejs\n2. Create Stimulus controller for drag-and-drop\n3. Implement dragging from sidebar to editor\n4. Add visual feedback during drag operations\n5. Handle drop events and insert content at cursor position\n6. Save new order when items are reordered

## 5. Implement context item preview and insertion [pending]
### Dependencies: None
### Description: Add preview functionality for context items and implement insertion into the document editor
### Details:
1. Create preview modal/popover component\n2. Implement syntax highlighting for code snippets\n3. Add insert button and keyboard shortcuts\n4. Integrate with Trix editor API for content insertion\n5. Handle different content types (plain text, markdown, code)\n6. Add undo/redo support for insertions

## 6. Create document versioning system [pending]
### Dependencies: None
### Description: Implement automatic versioning for documents with the ability to restore previous versions
### Details:
1. Add version tracking to Document model\n2. Create DocumentVersion model with content snapshots\n3. Implement automatic version creation on significant changes\n4. Add version comparison/diff functionality\n5. Create UI for browsing and restoring versions\n6. Add version naming and tagging features

## 7. Add search functionality for context items [pending]
### Dependencies: None
### Description: Implement full-text search across all context items with filtering options
### Details:
1. Add search input to context sidebar\n2. Implement database search using PostgreSQL full-text search\n3. Add filters for item type, date range, and tags\n4. Implement search highlighting in results\n5. Add search history/recent searches\n6. Optimize search performance with proper indexing

