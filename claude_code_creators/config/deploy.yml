# Name of your application. Used to uniquely configure containers.
service: claude_code_creators

# Name of the container image.
image: <%= ENV["DOCKER_REGISTRY"] || "ghcr.io" %>/claude-code-creators/app

# Deploy to these servers.
servers:
  web:
    hosts:
      - <%= ENV["PRODUCTION_HOST"] %>
    labels:
      traefik.http.routers.claude-code-creators.rule: Host(`<%= ENV["PRODUCTION_DOMAIN"] %>`)
      traefik.http.routers.claude-code-creators.tls: true
      traefik.http.routers.claude-code-creators.tls.certresolver: letsencrypt
    options:
      network: "web"
      health-cmd: "curl -f http://localhost:3000/health || exit 1"
      health-interval: "30s"
      health-timeout: "10s"
      health-retries: 3
  job:
    hosts:
      - <%= ENV["PRODUCTION_HOST"] %>
    cmd: bin/jobs
    options:
      network: "web"

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
proxy:
  ssl: true
  host: <%= ENV["PRODUCTION_DOMAIN"] %>
  healthcheck:
    path: /health
    port: 3000
    max_attempts: 7
    interval: "10s"

# Credentials for your image host.
registry:
  server: <%= ENV["DOCKER_REGISTRY"] || "ghcr.io" %>
  username: <%= ENV["DOCKER_USERNAME"] %>
  password:
    - DOCKER_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL
    - REDIS_URL
    - SECRET_KEY_BASE
    - ANTHROPIC_API_KEY
    - SENTRY_DSN
    - SMTP_PASSWORD
    - S3_SECRET_KEY
  clear:
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true
    RAILS_LOG_LEVEL: info
    
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    SOLID_QUEUE_IN_PUMA: true
    
    # Performance optimization
    JOB_CONCURRENCY: 3
    WEB_CONCURRENCY: 2
    RAILS_MAX_THREADS: 5
    
    # Database configuration
    DB_POOL: 20
    
    # Monitoring and observability
    ENABLE_METRICS: true
    METRICS_PORT: 9090
    
    # Security
    FORCE_SSL: true
    SESSION_TIMEOUT: 3600

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "claude_code_creators_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.4.2
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:16
    host: <%= ENV["PRODUCTION_HOST"] %>
    port: "127.0.0.1:5432:5432"
    env:
      clear:
        POSTGRES_DB: claude_code_creators_production
        POSTGRES_USER: claude_app
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    directories:
      - db_data:/var/lib/postgresql/data
    cmd: postgres -c 'max_connections=200' -c 'shared_buffers=256MB' -c 'effective_cache_size=1GB'
      
  redis:
    image: redis:7.2-alpine
    host: <%= ENV["PRODUCTION_HOST"] %>
    port: "127.0.0.1:6379:6379"
    cmd: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10
    directories:
      - redis_data:/data
      
  monitoring:
    image: prom/prometheus:latest
    host: <%= ENV["PRODUCTION_HOST"] %>
    port: "127.0.0.1:9090:9090"
    files:
      - config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    directories:
      - prometheus_data:/prometheus
      
  log_aggregator:
    image: grafana/loki:latest
    host: <%= ENV["PRODUCTION_HOST"] %>
    port: "127.0.0.1:3100:3100"
    files:
      - config/loki/loki.yml:/etc/loki/local-config.yaml
    directories:
      - loki_data:/loki
